package com.zgsu.graduation.mapper;

import com.zgsu.graduation.Vo.AllConferenceVo;
import com.zgsu.graduation.Vo.AppointmentTimeVo;
import com.zgsu.graduation.Vo.TodayConferenceVo;
import com.zgsu.graduation.model.ConferenceAppointment;
import com.zgsu.graduation.model.ConferenceAppointmentExample;

import java.sql.Time;
import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Component;

@Component
public interface ConferenceAppointmentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    long countByExample(ConferenceAppointmentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int deleteByExample(ConferenceAppointmentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int insert(ConferenceAppointment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int insertSelective(ConferenceAppointment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    List<ConferenceAppointment> selectByExampleWithRowbounds(ConferenceAppointmentExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    List<ConferenceAppointment> selectByExample(ConferenceAppointmentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    ConferenceAppointment selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int updateByExampleSelective(@Param("record") ConferenceAppointment record, @Param("example") ConferenceAppointmentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int updateByExample(@Param("record") ConferenceAppointment record, @Param("example") ConferenceAppointmentExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int updateByPrimaryKeySelective(ConferenceAppointment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table conference_appointment
     *
     * @mbg.generated Fri Apr 03 14:50:51 CST 2020
     */
    int updateByPrimaryKey(ConferenceAppointment record);

    @Select("select start_time,end_time from conference_appointment where room_id=#{id} and `date`=#{date} and end_time>=#{now} order by start_time ")
    List<AppointmentTimeVo> showAppointMentTime(@Param("id") Integer id, @Param("date") String date, @Param("now") Time now);

    @Select("select * from conference_appointment where room_id=#{roomId} and `date`=#{date} and" +
            "((start_time<=#{startTime} and end_time>=#{startTime}) or" +
            "(start_time<=#{endTime} and end_time>=#{endTime}) or" +
            "(start_time>=#{startTime} and end_time<=#{endTime}))")
    List<ConferenceAppointment> showAppointment(@Param("roomId") Integer roomId, @Param("date") String date, @Param("startTime") Time startTime, @Param("endTime") Time endTime);

    @Select("select * from conference_appointment where room_id=#{roomId} and `date`=#{date} and start_time<=#{time} and end_time>=#{time}")
    List<ConferenceAppointment> selectByTimeAndRoomId(@Param("rommId") Integer roomId, @Param("date") String date, @Param("time") Time time);

    @Select("select AVG(delay) from conference_appointment where conference_initiator=#{userId} and delay>0")
    Integer avgDelay(@Param("userId") Integer userId);

    @Select("select * from conference_appointment,conference_participant " +
            "where conference_appointment.date=#{today} and " +
            "conference_participant.participant=#{userId} and " +
            "conference_appointment.id=conference_participant.conference_id")
    List<TodayConferenceVo> showTodayConference(@Param("userId") Integer userId,@Param("today")String today);
    @Select("select * from conference_appointment,conference_participant " +
            "where conference_participant.participant=#{userId} and " +
            "conference_appointment.id=conference_participant.conference_id")
    List<AllConferenceVo> showAllConferenceByUserId(@Param("userId")Integer userId);
}